{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet TrainReservationComponent = class TrainReservationComponent {\n  constructor(http) {\n    this.http = http;\n    this.totalavilableseats = 0;\n    this.seats = {\n      name: '',\n      seats: 0\n    };\n    const range = Array.from({\n      length: 80\n    }, (_, i) => i + 1);\n    this.seatnumbers = this.chunkArray(range, 7);\n  }\n  chunkArray(arr, chunkSize) {\n    const chunks = [];\n    for (let i = 0; i < arr.length; i += chunkSize) {\n      chunks.push(arr.slice(i, i + chunkSize));\n    }\n    return chunks;\n  }\n  ngOnInit() {\n    this.http.get('http://localhost:3000/api/seats/get').subscribe(data => {\n      this.availableseats = data;\n      for (let i = 0; i < 80; i++) {\n        if (this.availableseats[i] === 1) this.totalavilableseats++;\n      }\n    });\n  }\n  reserveSeats(numSeats) {\n    //create a layout with the arrangement of seats just like 2D array\n    let reservedSeats = [];\n    const layout = this.chunkArray(this.availableseats, 7);\n    let n = layout.length;\n    //two cases\n    //case 1 in case seats available in single row\n    //case 2 not available in single row\n    //case 3 not enough seats to book\n    //case:1\n    // Loop through the rows of the seat layout\n    for (let i = 0; i < n; i++) {\n      let row = layout[i];\n      let numavailableSeats = 0;\n      for (let k = 0; k < 7; k++) {\n        if (row[k] === 1) numavailableSeats++;\n      }\n      if (numavailableSeats >= numSeats) {\n        for (let j = 0; j < row.length && numSeats > 0; j++) {\n          if (row[j] === 1) {\n            reservedSeats.push(i * 7 + j + 1);\n            numSeats--;\n            row[j] = 0;\n          }\n        }\n        if (numSeats === 0) {\n          return reservedSeats;\n        }\n      }\n    }\n    //case:2\n    // If there are not enough availableseats seats in one row, reserve nearby seats\n    for (let i = 0; i < layout.length; i++) {\n      let row = layout[i];\n      for (let j = 0; j < row.length && numSeats > 0; j++) {\n        if (row[j] === 1) {\n          reservedSeats.push(i * 7 + j + 1);\n          row[j] = 0;\n          numSeats--;\n        }\n      }\n      if (numSeats === 0) {\n        return reservedSeats;\n      }\n    }\n    //case:3\n    // If there are no availableseats seats left, return an empty array\n    return reservedSeats;\n  }\n  onSubmit() {\n    this.seats.seats = this.seats.seats > 7 ? 7 : this.seats.seats;\n    const allocatedSeats = this.reserveSeats(this.seats.seats);\n    this.http.post('http://localhost:3000/api/seats/create', {\n      \"name\": this.seats.name,\n      \"seats\": this.seats.seats,\n      \"seatNumbers\": allocatedSeats\n    }).subscribe(response => {\n      alert(`Booked Seats : ${allocatedSeats}`);\n      window.location.reload();\n    });\n  }\n};\nTrainReservationComponent = __decorate([Component({\n  selector: 'app-train-reservation',\n  templateUrl: './train-reservation.component.html',\n  styleUrls: ['./train-reservation.component.css']\n})], TrainReservationComponent);\nexport { TrainReservationComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,IAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAKpCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,uBAAkB,GAAC,CAAC;IAwBpB,UAAK,GAAG;MACNC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE;KACR;IAxBD,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAE,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC;IACvD,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,UAAU,CAACP,KAAK,EAAE,CAAC,CAAC;EAC9C;EAEQO,UAAU,CAACC,GAAU,EAAEC,SAAiB;IAC9C,MAAMC,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,GAAG,CAACL,MAAM,EAAEE,CAAC,IAAII,SAAS,EAAE;MAC9CC,MAAM,CAACC,IAAI,CAACH,GAAG,CAACI,KAAK,CAACP,CAAC,EAAEA,CAAC,GAAGI,SAAS,CAAC,CAAC;;IAE1C,OAAOC,MAAM;EACf;EAEAG,QAAQ;IACN,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAC,qCAAqC,CAAC,CAACC,SAAS,CAACC,IAAI,IAAG;MACpE,IAAI,CAACC,cAAc,GAACD,IAAI;MACxB,KAAI,IAAIX,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,EAAE,EAACA,CAAC,EAAE,EAAC;QACnB,IAAG,IAAI,CAACY,cAAc,CAACZ,CAAC,CAAC,KAAG,CAAC,EAAE,IAAI,CAACa,kBAAkB,EAAE;;IAE5D,CAAC,CAAC;EACJ;EAOAC,YAAY,CAACC,QAAgB;IAE3B;IACA,IAAIC,aAAa,GAAG,EAAE;IACtB,MAAMC,MAAM,GAAG,IAAI,CAACf,UAAU,CAAC,IAAI,CAACU,cAAc,EAAE,CAAC,CAAC;IACtD,IAAIM,CAAC,GAACD,MAAM,CAACnB,MAAM;IAEnB;IACA;IACA;IACA;IAEA;IACA;IACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,CAAC,EAAElB,CAAC,EAAE,EAAE;MAC1B,IAAImB,GAAG,GAAGF,MAAM,CAACjB,CAAC,CAAC;MACnB,IAAIoB,iBAAiB,GAAC,CAAC;MACvB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAC;QACxB,IAAGF,GAAG,CAACE,CAAC,CAAC,KAAK,CAAC,EAAED,iBAAiB,EAAE;;MAEtC,IAAIA,iBAAiB,IAAIL,QAAQ,EAAE;QACjC,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,CAACrB,MAAM,IAAIiB,QAAQ,GAAG,CAAC,EAAEO,CAAC,EAAE,EAAE;UACnD,IAAIH,GAAG,CAACG,CAAC,CAAC,KAAK,CAAC,EAAE;YAChBN,aAAa,CAACV,IAAI,CAAEN,CAAC,GAAC,CAAC,GAAEsB,CAAC,GAAC,CAAC,CAAC;YAC7BP,QAAQ,EAAE;YACVI,GAAG,CAACG,CAAC,CAAC,GAAG,CAAC;;;QAGd,IAAIP,QAAQ,KAAK,CAAC,EAAE;UAClB,OAAOC,aAAa;;;;IAK1B;IACA;IACA,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiB,MAAM,CAACnB,MAAM,EAAEE,CAAC,EAAE,EAAE;MACtC,IAAImB,GAAG,GAAGF,MAAM,CAACjB,CAAC,CAAC;MACnB,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,CAACrB,MAAM,IAAIiB,QAAQ,GAAG,CAAC,EAAEO,CAAC,EAAE,EAAE;QACnD,IAAIH,GAAG,CAACG,CAAC,CAAC,KAAK,CAAC,EAAE;UAChBN,aAAa,CAACV,IAAI,CAAEN,CAAC,GAAC,CAAC,GAAEsB,CAAC,GAAC,CAAC,CAAC;UAC7BH,GAAG,CAACG,CAAC,CAAC,GAAG,CAAC;UACVP,QAAQ,EAAE;;;MAGd,IAAIA,QAAQ,KAAK,CAAC,EAAE;QAClB,OAAOC,aAAa;;;IAIxB;IACA;IACA,OAAOA,aAAa;EACtB;EAEAO,QAAQ;IACN,IAAI,CAAC7B,KAAK,CAACA,KAAK,GAAE,IAAI,CAACA,KAAK,CAACA,KAAK,GAAC,CAAC,GAAC,CAAC,GAAC,IAAI,CAACA,KAAK,CAACA,KAAK;IACvD,MAAM8B,cAAc,GAAC,IAAI,CAACV,YAAY,CAAC,IAAI,CAACpB,KAAK,CAACA,KAAK,CAAC;IACxD,IAAI,CAACF,IAAI,CAACiC,IAAI,CAAC,wCAAwC,EAAE;MAAC,MAAM,EAAC,IAAI,CAAC/B,KAAK,CAACD,IAAI;MAAC,OAAO,EAAC,IAAI,CAACC,KAAK,CAACA,KAAK;MAAC,aAAa,EAAC8B;IAAc,CAAC,CAAC,CAACd,SAAS,CAACgB,QAAQ,IAAG;MAC9JC,KAAK,CAAC,kBAAkBH,cAAc,EAAE,CAAC;MACzCI,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IACxB,CAAC,CAAC;EACJ;CACD;AA/FYxC,yBAAyB,eANrCD,SAAS,CAAC;EACT0C,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,GAEW3C,yBAAyB,CA+FrC;SA/FYA,yBAAyB","names":["Component","TrainReservationComponent","constructor","http","name","seats","range","Array","from","length","_","i","seatnumbers","chunkArray","arr","chunkSize","chunks","push","slice","ngOnInit","get","subscribe","data","availableseats","totalavilableseats","reserveSeats","numSeats","reservedSeats","layout","n","row","numavailableSeats","k","j","onSubmit","allocatedSeats","post","response","alert","window","location","reload","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\ravin\\Downloads\\frontend\\src\\app\\train-reservation\\train-reservation.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-train-reservation',\n  templateUrl: './train-reservation.component.html',\n  styleUrls: ['./train-reservation.component.css']\n})\n\nexport class TrainReservationComponent {\n  seatnumbers: number[][];\n  availableseats : any;\n  totalavilableseats=0;\n\n  constructor(private http: HttpClient) { \n  const range = Array.from({ length: 80 }, (_, i) => i + 1);\n    this.seatnumbers = this.chunkArray(range, 7);\n  }\n  \n  private chunkArray(arr: any[], chunkSize: number): any[][] {\n    const chunks = [];\n    for (let i = 0; i < arr.length; i += chunkSize) {\n      chunks.push(arr.slice(i, i + chunkSize));\n    }\n    return chunks;\n  }\n\n  ngOnInit() {\n    this.http.get('http://localhost:3000/api/seats/get').subscribe(data => {\n      this.availableseats=data\n      for(let i=0;i<80;i++){\n        if(this.availableseats[i]===1) this.totalavilableseats++;\n      }\n    });\n  }\n  \n  seats = {\n    name: '',\n    seats: 0\n  };\n\n  reserveSeats(numSeats: number){\n\n    //create a layout with the arrangement of seats just like 2D array\n    let reservedSeats = [];\n    const layout = this.chunkArray(this.availableseats, 7);\n    let n=layout.length\n\n    //two cases\n    //case 1 in case seats available in single row\n    //case 2 not available in single row\n    //case 3 not enough seats to book\n\n    //case:1\n    // Loop through the rows of the seat layout\n    for (let i = 0; i < n; i++) {\n      let row = layout[i];\n      let numavailableSeats=0\n      for(let k = 0; k < 7; k++){\n        if(row[k] === 1) numavailableSeats++;\n      }\n      if (numavailableSeats >= numSeats) {\n        for (let j = 0; j < row.length && numSeats > 0; j++) {\n          if (row[j] === 1) {\n            reservedSeats.push((i*7)+j+1);\n            numSeats--;\n            row[j] = 0;\n          }\n        }\n        if (numSeats === 0) {\n          return reservedSeats;\n        }\n      }\n    }\n\n    //case:2\n    // If there are not enough availableseats seats in one row, reserve nearby seats\n    for (let i = 0; i < layout.length; i++) {\n      let row = layout[i];\n      for (let j = 0; j < row.length && numSeats > 0; j++) {\n        if (row[j] === 1) {\n          reservedSeats.push((i*7)+j+1);\n          row[j] = 0;\n          numSeats--;\n        }\n      }\n      if (numSeats === 0) {\n        return reservedSeats;\n      }\n    }\n\n    //case:3\n    // If there are no availableseats seats left, return an empty array\n    return reservedSeats\n  } \n\n  onSubmit() {\n    this.seats.seats= this.seats.seats>7?7:this.seats.seats\n    const allocatedSeats=this.reserveSeats(this.seats.seats)\n    this.http.post('http://localhost:3000/api/seats/create', {\"name\":this.seats.name,\"seats\":this.seats.seats,\"seatNumbers\":allocatedSeats}).subscribe(response => {\n    alert(`Booked Seats : ${allocatedSeats}`)\n    window.location.reload();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}